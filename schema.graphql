scalar UUID
scalar BigDecimal
scalar LocalDate
scalar Upload

type Query {
  allIPRs: [IntellectualProperty!]!
  nonIPTimeRecords: [TimeRecord!]!
  allTimeRecordCategories: [TimeRecordCategory!]!
  monthRevenueAndExpenseEntry(year: Int!, month: Int!): [RevenueAndExpenseEntry!]
  simulateMortgage(mortgageCalculationParams: MortgageCalculationParams): [MortgageCalculationInstallment!]!
}

type Mutation{
  addRevenueAndExpenseEntry(input: RevenueAndExpenseEntryInput):RevenueAndExpenseEntry
  addIPR(input: IntellectualPropertyData): IntellectualProperty
  updateIPR(intellectualPropertyId: Int!, input: IntellectualPropertyData): IntellectualProperty
  deleteIPR(intellectualPropertyId: Int!): String!
  createTask(intellectualPropertyId: Int!, taskData: TaskData!): String!
  updateTask(taskId: Int!, taskData: TaskData!): String!
  deleteTask(taskId: Int!): String!
  createTimeRecord(timeRecordData: TimeRecordData!): String!
  updateTimeRecord(timeRecordId: Int!, timeRecordData: TimeRecordData!): String!
  assignCategoryToTimeRecord(timeRecordId: Int!, timeRecordCategoryId: Int): String!
  deleteTimeRecord(timeRecordId: Int!): String!
  createTimeRecordCategory(name: String!): TimeRecordCategory!
  updateTimeRecordCategory(timeRecordId: Int!, name: String!): String!
  deleteTimeRecordCategory(timeRecordId:Int!): String!
}

input MortgageCalculationParams {
  mortgageAmount: BigDecimal!,
  numberOfInstallments: Int!,
  overpaymentMonthlyBudget: BigDecimal!,
  overpaymentYearlyBudget: BigDecimal!
  rate: BigDecimal!,
  repaymentStart: LocalDate!,
  wibor: BigDecimal!,
  holidaysMonthAfterNumberOfInstallments: Int,
}

type MortgageCalculationInstallment {
  paymentFrom: LocalDate!,
  paymentTo: LocalDate!,
  remainingCapitalAtTheBeginning: BigDecimal!,
  installment: BigDecimal!,
  repaidCapital: BigDecimal!,
  paidInterest: BigDecimal!,
  overpayment: BigDecimal!
}

input IntellectualPropertyData{
  description: String!
}

input TaskData{
  coAuthors: String!,
  description: String!
}

enum AssignmentAction {
  NOP, ASSIGN, UNASSIGN
}

input TimeRecordData {
  taskId:Int,
  date:LocalDate!,
  numberOfHours:BigDecimal!,
  description:String!,
  assignmentAction:AssignmentAction!
}

type DomainSimple {
  id: Int!,
  name: String!
}

type IntellectualProperty {
  id: Int!,
  description: String!,
  tasks: [Task!],
  domain: DomainSimple!
}

type Task {
  id: Int!,
  attachments: [String!],
  coAuthors: String!,
  description: String!,
  timeRecords: [TimeRecord!]
}

type TimeRecord {
  id: Int!,
  date: LocalDate!,
  numberOfHours: BigDecimal!,
  description: String,
  timeRecordCategory: TimeRecordCategory,
  domain: DomainSimple!
}

type TimeRecordCategory {
  id: Int!,
  name: String!,
  domain: DomainSimple!
}

type RevenueAndExpenseEntry {
  publicId: UUID!,
  domain: DomainSimple!,
  entryOrder: Int!,
  entryDate: LocalDate!,
  accountingDocumentNumber: String!,
  counterparty: String!,
  counterpartyAddress: String!,
  description: String!,
  providedGoodsAndServicesValue: BigDecimal!,
  otherIncome: BigDecimal!,
  totalIncome: BigDecimal!,
  purchasedGoodsAndMaterialsValue: BigDecimal!,
  additionalCostOfPurchase: BigDecimal!,
  remunerationInCashOrInKind: BigDecimal!,
  otherExpense: BigDecimal!,
  totalExpense: BigDecimal!,
  comments: String!
}

input RevenueAndExpenseEntryInput {
  publicId: UUID,
  entryOrder: Int!,
  entryDate: LocalDate!,
  accountingDocumentNumber: String!,
  counterparty: String!,
  counterpartyAddress: String!,
  description: String!,
  providedGoodsAndServicesValue: BigDecimal!,
  otherIncome: BigDecimal!,
  totalIncome: BigDecimal!,
  purchasedGoodsAndMaterialsValue: BigDecimal!,
  additionalCostOfPurchase: BigDecimal!,
  remunerationInCashOrInKind: BigDecimal!,
  otherExpense: BigDecimal!,
  totalExpense: BigDecimal!,
  comments: String!
}
